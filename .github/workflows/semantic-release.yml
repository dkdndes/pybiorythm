name: Semantic Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.repository == 'dkdndes/pybiorythm' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: 'latest'

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Configure Git
      run: |
        git config --global user.name "semantic-release"
        git config --global user.email "semantic-release@github.com"

    - name: Create CHANGELOG if missing
      run: |
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> CHANGELOG.md
          echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "chore: create initial CHANGELOG.md [skip ci]" || true
        fi

    - name: Run Semantic Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_COMMITTER_NAME: "semantic-release"
        GIT_COMMITTER_EMAIL: "semantic-release@github.com"
        GIT_AUTHOR_NAME: "semantic-release" 
        GIT_AUTHOR_EMAIL: "semantic-release@github.com"
      run: |
        echo "Running semantic-release version check..."
        semantic-release version --print
        
        echo "Running semantic-release version..."
        semantic-release version
        
        echo "Running semantic-release publish..."
        semantic-release publish

    - name: Update version in files
      if: success()
      run: |
        # Get the new version from git tags
        NEW_VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')
        
        if [ ! -z "$NEW_VERSION" ] && [ "$NEW_VERSION" != "0.1.0" ]; then
          echo "Updating version to $NEW_VERSION"
          
          # Update _version.py
          echo "__version__ = \"$NEW_VERSION\"" > _version.py
          
          # Update biorythm/__init__.py
          sed -i "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" biorythm/__init__.py
          
          # Commit version updates
          git add _version.py biorythm/__init__.py
          git commit -m "chore: update version files to $NEW_VERSION [skip ci]" || true
          git push origin main || true
        fi

  trigger-workflows:
    name: Trigger Related Workflows
    runs-on: ubuntu-latest
    needs: semantic-release
    if: success()
    
    steps:
    - name: Trigger Docker Build
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'docker-publish.yml',
            ref: 'main'
          });

    - name: Trigger SBOM Generation
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'sbom.yml',
            ref: 'main'
          });

  create-pr-for-develop:
    name: Create PR to Develop
    runs-on: ubuntu-latest
    needs: semantic-release
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create or Update Develop Branch
      run: |
        # Create develop branch if it doesn't exist
        git fetch origin
        if git branch -r | grep -q "origin/develop"; then
          git checkout -b develop origin/develop
        else
          git checkout -b develop
        fi
        
        # Merge main into develop
        git merge origin/main --no-ff -m "chore: merge main into develop after release"
        git push origin develop

    - name: Create Pull Request
      uses: actions/github-script@v7
      with:
        script: |
          const { data: prs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head: 'develop',
            base: 'main',
            state: 'open'
          });
          
          if (prs.length === 0) {
            await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'chore: sync develop with main after release',
              head: 'develop',
              base: 'main',
              body: `
              ## Automatic PR
              
              This PR keeps the develop branch in sync with main after a semantic release.
              
              ### Changes
              - Latest release changes merged to develop
              - Version updates applied
              
              This PR can be safely merged or closed if develop branch workflow is not needed.
              `
            });
          }