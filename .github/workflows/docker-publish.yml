name: Docker Build & Publish

on:
  workflow_run:
    workflows: ["Python Semantic Release"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: false
        default: 'main'
        type: choice
        options:
          - main
          - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Determine branch
      id: branch
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "branch=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
        else
          echo "branch=${{ github.event.workflow_run.head_branch }}" >> $GITHUB_OUTPUT
        fi

    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        ref: ${{ steps.branch.outputs.branch }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up Python and UV for version detection
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: 'latest'

    - name: Get latest release
      id: get-release
      run: |
        if [ "${{ steps.branch.outputs.branch }}" = "main" ]; then
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name // empty')
          if [ -n "$LATEST_RELEASE" ]; then
            echo "version=${LATEST_RELEASE#v}" >> $GITHUB_OUTPUT
            echo "tag=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          else
            echo "version=0.1.0" >> $GITHUB_OUTPUT
            echo "tag=v0.1.0" >> $GITHUB_OUTPUT
          fi
        else
          # For develop branch, get the latest pre-release
          LATEST_PRERELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[] | select(.prerelease == true) | .tag_name' | head -n1)
          if [ -n "$LATEST_PRERELEASE" ]; then
            echo "version=${LATEST_PRERELEASE#v}" >> $GITHUB_OUTPUT
            echo "tag=$LATEST_PRERELEASE" >> $GITHUB_OUTPUT
          else
            echo "version=0.1.0-a.1" >> $GITHUB_OUTPUT
            echo "tag=v0.1.0-a.1" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.get-release.outputs.version }}
          type=raw,value=${{ steps.get-release.outputs.tag }}
          type=raw,value=latest,enable=${{ steps.branch.outputs.branch == 'main' }}
          type=raw,value=develop,enable=${{ steps.branch.outputs.branch == 'develop' }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      id: build
      with:
        context: .
        target: production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Biorhythm calculation container
        build-args: |
          VERSION=${{ steps.get-release.outputs.version }}

    - name: Test published image
      run: |
        # Get the actual image reference from metadata
        IMAGE_REF=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
        
        # Wait for image to be available
        sleep 30
        
        # Test the published image
        docker run --rm $IMAGE_REF python -c "
        import biorythm
        from datetime import datetime
        calc = biorythm.BiorhythmCalculator()
        result = calc.calculate_biorhythm_values(datetime(1990, 5, 15), datetime(2023, 6, 1))
        print('Published image test passed!')
        print(f'Image: $IMAGE_REF')
        print(f'Result: {result}')
        "

    - name: Workflow summary
      run: |
        echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ steps.branch.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.get-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: ${{ steps.get-release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Published Tags:" >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.meta.outputs.tags }}' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY