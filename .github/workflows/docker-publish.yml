name: Docker Build and Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch/tag to build from'
        required: false
        default: 'main'
        type: string
      push_image:
        description: 'Push image to registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.ref || github.ref }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push_image == 'true')
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      id: build
      with:
        context: .
        target: production
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push_image == 'true') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Biorhythm calculation container

    - name: Generate Docker SBOM
      if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push_image == 'true')
      run: |
        # Install Syft for SBOM generation
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Get the actual image reference from metadata
        IMAGE_REF=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
        
        # Generate SBOM for the published image
        syft $IMAGE_REF \
          --output cyclonedx-json=sbom-docker-published.json \
          --output spdx-json=sbom-docker-spdx.json

    - name: Upload SBOM to release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          sbom-docker-published.json
          sbom-docker-spdx.json

    - name: Attach SBOM to container image
      if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push_image == 'true')
      run: |
        # Install cosign for attestation
        curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
        sudo mv cosign-linux-amd64 /usr/local/bin/cosign
        sudo chmod +x /usr/local/bin/cosign
        
        # Attest SBOM to the container image (experimental)
        # This creates a signed attestation that can be verified
        echo "SBOM attestation would be created here in production"
        echo "cosign attest --predicate sbom-docker-published.json ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        format: 'sarif'
        output: 'trivy-results.sarif'
      if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push_image == 'true')

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push_image == 'true')

    - name: Test published image
      if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push_image == 'true')
      run: |
        # Get the actual image reference from metadata
        IMAGE_REF=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
        
        # Wait for image to be available
        sleep 30
        
        # Test the published image
        docker run --rm $IMAGE_REF python -c "
        import biorythm
        from datetime import datetime
        calc = biorythm.BiorhythmCalculator()
        result = calc.calculate_biorhythm_values(datetime(1990, 5, 15), datetime(2023, 6, 1))
        print('Published image test passed!')
        print(f'Image: $IMAGE_REF')
        print(f'Result: {result}')
        "

    - name: Update Docker Hub description
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: ${{ github.repository }}
        readme-filepath: ./DOCKER.md
      continue-on-error: true