name: Sync Branches

on:
  workflow_run:
    workflows: ["Semantic Release"]
    types: [completed]
    branches: [main]

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  sync-develop:
    name: Sync Main to Develop
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.repository == 'dkdndes/pybiorythm'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Get release information
      id: release-info
      run: |
        # Get the latest tag/version from the completed semantic-release
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "no-tag")
        LATEST_COMMIT=$(git rev-parse HEAD)
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
        echo "Latest release: $LATEST_TAG ($LATEST_COMMIT)"

    - name: Sync main to develop
      id: sync
      run: |
        # Fetch latest changes
        git fetch origin main develop
        
        # Switch to develop branch
        git checkout develop
        git reset --hard origin/develop
        
        # Attempt to merge main into develop
        echo "Attempting to merge main into develop..."
        if git merge origin/main --no-ff -m "chore: sync main to develop after release ${{ steps.release-info.outputs.latest_tag }}"; then
          echo "merge_success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Merge successful"
          
          # Push the changes
          git push origin develop
          echo "‚úÖ Successfully synced main to develop"
        else
          echo "merge_success=false" >> $GITHUB_OUTPUT
          echo "‚ùå Merge conflict detected"
          
          # Reset to clean state
          git merge --abort || true
          git reset --hard origin/develop
          
          # Get conflict details
          CONFLICT_FILES=$(git merge origin/main --no-commit --no-ff 2>&1 | grep "CONFLICT" || echo "No specific conflict files detected")
          git merge --abort || true
          
          echo "conflict_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CONFLICT_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Create PR for manual resolution
      if: steps.sync.outputs.merge_success == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const title = `sync: merge main into develop after release ${{ steps.release-info.outputs.latest_tag }}`;
          const body = `## Automated Branch Sync Failed

          The automatic sync from main to develop failed due to merge conflicts after releasing ${{ steps.release-info.outputs.latest_tag }}.

          ### Conflict Details
          \`\`\`
          ${{ steps.sync.outputs.conflict_files }}
          \`\`\`

          ### Manual Resolution Required
          Please resolve the conflicts manually:

          1. **Checkout develop branch:**
             \`\`\`bash
             git checkout develop
             git pull origin develop
             \`\`\`

          2. **Merge main with conflicts:**
             \`\`\`bash
             git merge main
             \`\`\`

          3. **Resolve conflicts in the files listed above**

          4. **Complete the merge:**
             \`\`\`bash
             git add .
             git commit -m "chore: resolve merge conflicts when syncing main to develop"
             git push origin develop
             \`\`\`

          ### Release Information
          - **Latest Release:** ${{ steps.release-info.outputs.latest_tag }}
          - **Main Commit:** ${{ steps.release-info.outputs.latest_commit }}

          This PR will be automatically closed once the conflicts are resolved manually.`;

          // Check if a similar PR already exists
          const { data: existingPRs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head: 'main',
            base: 'develop',
            state: 'open'
          });

          if (existingPRs.length === 0) {
            // Create the PR
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              head: 'main',
              base: 'develop',
              body: body,
              draft: false
            });
            
            console.log(`Created PR #${pr.number} for manual conflict resolution`);
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['sync', 'merge-conflict', 'manual-intervention-required']
            });
          } else {
            console.log(`Similar PR already exists: #${existingPRs[0].number}`);
            
            // Update the existing PR with latest information
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: existingPRs[0].number,
              title: title,
              body: body
            });
          }

    - name: Report sync status
      run: |
        if [[ "${{ steps.sync.outputs.merge_success }}" == "true" ]]; then
          echo "üéâ Branch sync completed successfully!"
          echo "‚úÖ Main has been merged into develop"
          echo "üìã Release: ${{ steps.release-info.outputs.latest_tag }}"
        else
          echo "‚ö†Ô∏è Branch sync requires manual intervention"
          echo "‚ùå Merge conflicts detected"
          echo "üìù PR created for manual resolution"
        fi

  cleanup-old-sync-prs:
    name: Cleanup Old Sync PRs
    runs-on: ubuntu-latest
    needs: sync-develop
    if: needs.sync-develop.outputs.merge_success == 'true'
    
    steps:
    - name: Close old sync PRs
      uses: actions/github-script@v7
      with:
        script: |
          // Find and close old sync PRs that are no longer needed
          const { data: oldPRs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head: 'main',
            base: 'develop',
            state: 'open'
          });

          for (const pr of oldPRs) {
            if (pr.title.includes('sync: merge main into develop')) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                state: 'closed'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '‚úÖ Conflicts resolved automatically. This PR is no longer needed.'
              });
              
              console.log(`Closed old sync PR #${pr.number}`);
            }
          }