name: Blue-Green Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - prod
      image_tag:
        description: 'Image tag to deploy'
        required: true
        type: string
      deployment_slot:
        description: 'Deployment slot (blue/green)'
        required: true
        type: choice
        options:
          - blue
          - green
      switch_traffic:
        description: 'Switch traffic to this deployment'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validate deployment inputs
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      image_exists: ${{ steps.check.outputs.exists }}
      current_slot: ${{ steps.check.outputs.current_slot }}
      target_slot: ${{ steps.check.outputs.target_slot }}
    
    steps:
    - name: Check if image exists
      id: check
      run: |
        # Check if the specified image tag exists
        IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
        
        if docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Image $IMAGE exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "‚ùå Image $IMAGE does not exist"
          exit 1
        fi
        
        # Determine current and target slots
        CURRENT_SLOT="blue"  # Default assumption
        TARGET_SLOT="${{ github.event.inputs.deployment_slot }}"
        
        echo "current_slot=$CURRENT_SLOT" >> $GITHUB_OUTPUT
        echo "target_slot=$TARGET_SLOT" >> $GITHUB_OUTPUT
        
        echo "Target slot: $TARGET_SLOT"

  # Deploy to blue or green slot
  deploy:
    name: Deploy to ${{ github.event.inputs.deployment_slot }} slot
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.image_exists == 'true'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create blue-green deployment manifest
      run: |
        mkdir -p manifests/blue-green
        
        SLOT="${{ github.event.inputs.deployment_slot }}"
        ENV="${{ github.event.inputs.environment }}"
        IMAGE_TAG="${{ github.event.inputs.image_tag }}"
        
        # Create deployment for the target slot
        cat > manifests/blue-green/deployment-${SLOT}.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: pybiorythm-${ENV}-${SLOT}
          namespace: pybiorythm-${ENV}
          labels:
            app: pybiorythm
            environment: ${ENV}
            slot: ${SLOT}
            version: ${IMAGE_TAG}
        spec:
          replicas: 2
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 1
              maxUnavailable: 0
          selector:
            matchLabels:
              app: pybiorythm
              environment: ${ENV}
              slot: ${SLOT}
          template:
            metadata:
              labels:
                app: pybiorythm
                environment: ${ENV}
                slot: ${SLOT}
                version: ${IMAGE_TAG}
            spec:
              containers:
              - name: pybiorythm
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
                ports:
                - containerPort: 8080
                env:
                - name: ENVIRONMENT
                  value: "${ENV}"
                - name: VERSION
                  value: "${IMAGE_TAG}"
                - name: DEPLOYMENT_SLOT
                  value: "${SLOT}"
                resources:
                  requests:
                    memory: "64Mi"
                    cpu: "50m"
                  limits:
                    memory: "256Mi"
                    cpu: "200m"
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 8080
                  initialDelaySeconds: 10
                  periodSeconds: 5
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 8080
                  initialDelaySeconds: 20
                  periodSeconds: 10
                startupProbe:
                  httpGet:
                    path: /health
                    port: 8080
                  initialDelaySeconds: 5
                  periodSeconds: 2
                  timeoutSeconds: 1
                  failureThreshold: 30
        EOF

        # Create service for the slot (for testing)
        cat > manifests/blue-green/service-${SLOT}.yaml << EOF
        apiVersion: v1
        kind: Service
        metadata:
          name: pybiorythm-${ENV}-${SLOT}
          namespace: pybiorythm-${ENV}
          labels:
            app: pybiorythm
            environment: ${ENV}
            slot: ${SLOT}
        spec:
          selector:
            app: pybiorythm
            environment: ${ENV}
            slot: ${SLOT}
          ports:
          - protocol: TCP
            port: 80
            targetPort: 8080
          type: ClusterIP
        EOF

        # Create or update the main service (traffic routing)
        cat > manifests/blue-green/service-main.yaml << EOF
        apiVersion: v1
        kind: Service
        metadata:
          name: pybiorythm-${ENV}
          namespace: pybiorythm-${ENV}
          labels:
            app: pybiorythm
            environment: ${ENV}
          annotations:
            deployment.kubernetes.io/active-slot: "${{ github.event.inputs.switch_traffic == 'true' && github.event.inputs.deployment_slot || 'blue' }}"
        spec:
          selector:
            app: pybiorythm
            environment: ${ENV}
            slot: "${{ github.event.inputs.switch_traffic == 'true' && github.event.inputs.deployment_slot || 'blue' }}"
          ports:
          - protocol: TCP
            port: 80
            targetPort: 8080
          type: LoadBalancer
        EOF

    - name: Create deployment test script
      run: |
        cat > test-deployment.sh << 'EOF'
        #!/bin/bash
        set -e
        
        SLOT="${{ github.event.inputs.deployment_slot }}"
        ENV="${{ github.event.inputs.environment }}"
        IMAGE_TAG="${{ github.event.inputs.image_tag }}"
        
        echo "üîç Testing deployment in ${SLOT} slot..."
        
        # Test the specific slot service
        kubectl wait --for=condition=ready pod -l app=pybiorythm,environment=${ENV},slot=${SLOT} --timeout=300s
        
        # Get service IP
        SERVICE_IP=$(kubectl get service pybiorythm-${ENV}-${SLOT} -o jsonpath='{.spec.clusterIP}')
        
        echo "‚úÖ Deployment successful in ${SLOT} slot"
        echo "Service IP: ${SERVICE_IP}"
        
        # Port-forward for testing
        kubectl port-forward service/pybiorythm-${ENV}-${SLOT} 8080:80 &
        PORT_FORWARD_PID=$!
        sleep 5
        
        # Test the service
        if curl -f http://localhost:8080/health >/dev/null 2>&1; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed"
          kill $PORT_FORWARD_PID
          exit 1
        fi
        
        kill $PORT_FORWARD_PID
        echo "‚úÖ All tests passed for ${SLOT} slot"
        EOF
        
        chmod +x test-deployment.sh

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: blue-green-deployment-${{ github.event.inputs.deployment_slot }}-${{ github.event.inputs.image_tag }}
        path: |
          manifests/blue-green/
          test-deployment.sh
        retention-days: 7

    - name: Simulate deployment (for demonstration)
      run: |
        echo "üöÄ Deploying to ${{ github.event.inputs.deployment_slot }} slot"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
        echo "Switch traffic: ${{ github.event.inputs.switch_traffic }}"
        
        # In a real scenario, you would apply the manifests:
        # kubectl apply -f manifests/blue-green/deployment-${{ github.event.inputs.deployment_slot }}.yaml
        # kubectl apply -f manifests/blue-green/service-${{ github.event.inputs.deployment_slot }}.yaml
        # 
        # If switching traffic:
        # if [ "${{ github.event.inputs.switch_traffic }}" = "true" ]; then
        #   kubectl apply -f manifests/blue-green/service-main.yaml
        # fi

  # Switch traffic between blue and green
  switch-traffic:
    name: Switch Traffic
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: github.event.inputs.switch_traffic == 'true' && success()
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Switch traffic to ${{ github.event.inputs.deployment_slot }}
      run: |
        SLOT="${{ github.event.inputs.deployment_slot }}"
        ENV="${{ github.event.inputs.environment }}"
        
        echo "üîÑ Switching traffic to ${SLOT} slot in ${ENV} environment"
        
        # In a real scenario, you would update the main service selector:
        # kubectl patch service pybiorythm-${ENV} -p '{"spec":{"selector":{"slot":"'${SLOT}'"}}}'
        
        echo "‚úÖ Traffic switched to ${SLOT} slot"

    - name: Verify traffic switch
      run: |
        SLOT="${{ github.event.inputs.deployment_slot }}"
        ENV="${{ github.event.inputs.environment }}"
        
        echo "üîç Verifying traffic switch..."
        
        # In a real scenario, you would test the main service:
        # kubectl port-forward service/pybiorythm-${ENV} 8080:80 &
        # PORT_FORWARD_PID=$!
        # sleep 5
        # 
        # # Test multiple requests to ensure they hit the correct slot
        # for i in {1..5}; do
        #   RESPONSE=$(curl -s http://localhost:8080/health)
        #   echo "Response $i: $RESPONSE"
        # done
        # 
        # kill $PORT_FORWARD_PID
        
        echo "‚úÖ Traffic verification completed"

  # Cleanup old deployment
  cleanup:
    name: Cleanup Old Deployment
    runs-on: ubuntu-latest
    needs: [validate, deploy, switch-traffic]
    if: github.event.inputs.switch_traffic == 'true' && success()
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Cleanup inactive slot
      run: |
        ACTIVE_SLOT="${{ github.event.inputs.deployment_slot }}"
        INACTIVE_SLOT=$([ "$ACTIVE_SLOT" = "blue" ] && echo "green" || echo "blue")
        ENV="${{ github.event.inputs.environment }}"
        
        echo "üßπ Cleaning up inactive slot: ${INACTIVE_SLOT}"
        
        # In a real scenario, you would scale down the inactive deployment:
        # kubectl scale deployment pybiorythm-${ENV}-${INACTIVE_SLOT} --replicas=0
        # 
        # Or completely remove it:
        # kubectl delete deployment pybiorythm-${ENV}-${INACTIVE_SLOT}
        # kubectl delete service pybiorythm-${ENV}-${INACTIVE_SLOT}
        
        echo "‚úÖ Cleanup completed for ${INACTIVE_SLOT} slot"

  # Generate deployment report
  deployment-report:
    name: Deployment Report
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always()
    
    steps:
    - name: Generate deployment report
      run: |
        cat >> $GITHUB_STEP_SUMMARY << EOF
        # üîÑ Blue-Green Deployment Report
        
        ## üìã Deployment Details
        - **Environment**: \`${{ github.event.inputs.environment }}\`
        - **Target Slot**: \`${{ github.event.inputs.deployment_slot }}\`
        - **Image Tag**: \`${{ github.event.inputs.image_tag }}\`
        - **Switch Traffic**: \`${{ github.event.inputs.switch_traffic }}\`
        - **Status**: ${{ needs.deploy.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
        
        ## üéØ Deployment Strategy
        This deployment uses **Blue-Green strategy** where:
        - **Blue**: Current production version
        - **Green**: New version being deployed
        - Traffic can be switched instantly between slots
        - Zero-downtime deployments
        - Easy rollback capability
        
        ## üöÄ Next Steps
        
        ${{ github.event.inputs.switch_traffic == 'true' && '### ‚úÖ Traffic Switched
        Traffic has been switched to the ' || '### üîÑ Manual Traffic Switch Required
        To switch traffic to the ' }}${{ github.event.inputs.deployment_slot }} slot${{ github.event.inputs.switch_traffic == 'true' && '' || ', run:' }}
        
        ${{ github.event.inputs.switch_traffic == 'false' && '```bash
        # Switch traffic manually
        kubectl patch service pybiorythm-' || '' }}${{ github.event.inputs.switch_traffic == 'false' && github.event.inputs.environment || '' }}${{ github.event.inputs.switch_traffic == 'false' && ' -p '"'"'{"spec":{"selector":{"slot":"' || '' }}${{ github.event.inputs.switch_traffic == 'false' && github.event.inputs.deployment_slot || '' }}${{ github.event.inputs.switch_traffic == 'false' && '"}}}'"'"'
        ```' || '' }}
        
        ### üìä Monitor Deployment
        \`\`\`bash
        # Watch pods in ${{ github.event.inputs.deployment_slot }} slot
        kubectl get pods -l slot=${{ github.event.inputs.deployment_slot }} -w
        
        # Check service endpoints
        kubectl get endpoints pybiorythm-${{ github.event.inputs.environment }}
        
        # View logs
        kubectl logs -l slot=${{ github.event.inputs.deployment_slot }} --tail=50
        \`\`\`
        
        ### üîô Rollback (if needed)
        \`\`\`bash
        # Switch back to previous slot
        PREVIOUS_SLOT=\$([ "${{ github.event.inputs.deployment_slot }}" = "blue" ] && echo "green" || echo "blue")
        kubectl patch service pybiorythm-${{ github.event.inputs.environment }} -p '{"spec":{"selector":{"slot":"'\$PREVIOUS_SLOT'"}}}'
        \`\`\`
        EOF