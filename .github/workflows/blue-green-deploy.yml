name: Blue-Green Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - prod
      image_tag:
        description: 'Image tag to deploy'
        required: true
        type: string
      deployment_slot:
        description: 'Deployment slot (blue/green)'
        required: true
        type: choice
        options:
          - blue
          - green
      switch_traffic:
        description: 'Switch traffic to this deployment'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      image_exists: ${{ steps.check.outputs.exists }}
      target_slot: ${{ steps.check.outputs.target_slot }}
    
    steps:
    - name: Validate inputs
      id: check
      run: |
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Image tag: ${{ github.event.inputs.image_tag }}"
        echo "Deployment slot: ${{ github.event.inputs.deployment_slot }}"
        echo "Switch traffic: ${{ github.event.inputs.switch_traffic }}"
        
        # For demo purposes, assume image exists
        echo "exists=true" >> $GITHUB_OUTPUT
        echo "target_slot=${{ github.event.inputs.deployment_slot }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ${{ github.event.inputs.deployment_slot }} slot
    runs-on: ubuntu-latest
    needs: validate
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Simulate Blue-Green Deployment
      run: |
        echo "🚀 Blue-Green Deployment Simulation"
        echo "===================================="
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
        echo "Target Slot: ${{ github.event.inputs.deployment_slot }}"
        echo "Switch Traffic: ${{ github.event.inputs.switch_traffic }}"
        echo ""
        
        SLOT="${{ github.event.inputs.deployment_slot }}"
        OTHER_SLOT=$([ "$SLOT" = "blue" ] && echo "green" || echo "blue")
        
        echo "📋 Deployment Steps:"
        echo "1. ✅ Validate image exists"
        echo "2. ✅ Deploy to $SLOT slot"
        echo "3. ✅ Health check $SLOT slot"
        
        if [ "${{ github.event.inputs.switch_traffic }}" = "true" ]; then
          echo "4. ✅ Switch traffic from $OTHER_SLOT to $SLOT"
          echo "5. ✅ Scale down $OTHER_SLOT slot"
        else
          echo "4. ⏸️  Traffic switch skipped (manual intervention required)"
        fi
        
        echo ""
        echo "🎯 Deployment Commands (simulation):"
        echo "kubectl apply -f manifests/${{ github.event.inputs.environment }}/deployment-$SLOT.yaml"
        echo "kubectl wait --for=condition=ready pod -l slot=$SLOT --timeout=300s"
        
        if [ "${{ github.event.inputs.switch_traffic }}" = "true" ]; then
          echo "kubectl patch service app-service -p '{\"spec\":{\"selector\":{\"slot\":\"$SLOT\"}}}'"
        fi
        
        echo ""
        echo "✅ Blue-Green deployment simulation completed!"

  report:
    name: Deployment Report
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always()
    
    steps:
    - name: Generate Report
      run: |
        cat >> $GITHUB_STEP_SUMMARY << EOF
        # 🔄 Blue-Green Deployment Report
        
        ## 📋 Deployment Summary
        - **Environment**: ${{ github.event.inputs.environment }}
        - **Image Tag**: ${{ github.event.inputs.image_tag }}
        - **Target Slot**: ${{ github.event.inputs.deployment_slot }}
        - **Traffic Switched**: ${{ github.event.inputs.switch_traffic == 'true' && 'Yes ✅' || 'No ❌' }}
        - **Status**: ${{ needs.deploy.result == 'success' && 'Success ✅' || 'Failed ❌' }}
        
        ## 🚀 Next Steps
        
        ### Manual Traffic Switch
        If traffic was not switched automatically, use:
        \`\`\`bash
        kubectl patch service pybiorythm-${{ github.event.inputs.environment }} \\
          -p '{"spec":{"selector":{"slot":"${{ github.event.inputs.deployment_slot }}"}}}'
        \`\`\`
        
        ### Monitor Deployment
        \`\`\`bash
        kubectl get pods -l slot=${{ github.event.inputs.deployment_slot }} -w
        kubectl logs -l slot=${{ github.event.inputs.deployment_slot }} --tail=50
        \`\`\`
        
        ### Rollback (if needed)
        \`\`\`bash
        OTHER_SLOT=\$([ "${{ github.event.inputs.deployment_slot }}" = "blue" ] && echo "green" || echo "blue")
        kubectl patch service pybiorythm-${{ github.event.inputs.environment }} \\
          -p '{"spec":{"selector":{"slot":"'\$OTHER_SLOT'"}}}'
        \`\`\`
        EOF