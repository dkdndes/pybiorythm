name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.12'
  UV_VERSION: 'latest'

jobs:
  # Job 1: Code Quality and Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Skip CI for semantic-release commits
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, 'chore(release)')"
    strategy:
      matrix:
        python-version: ['3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install dependencies
      timeout-minutes: 5
      run: |
        uv sync --group dev

    - name: Lint with Ruff
      run: |
        uv run ruff check .
        uv run  ruff format --check .

    - name: Run tests with coverage
      run: |
        uv run pytest --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=85

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # Job 2: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install dependencies
      timeout-minutes: 3
      run: |
        uv sync --group dev

    - name: Run safety check (dependency vulnerabilities)
      run: uv run safety check --json

    - name: Run bandit security linter
      run: uv run bandit -r biorythm/ main.py -f json -o bandit-report.json

    - name: Upload bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json

  # Job 3: Docker Build and Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install dependencies
      timeout-minutes: 3
      run: |
        uv sync --group dev

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get package version
      id: get-version
      run: |
        # Get version from setuptools-scm (works because we have git context)
        VERSION=$(uv run python -c "import biorythm; print(biorythm.__version__)" 2>/dev/null || echo "0.1.dev")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "ðŸ“¦ Package version: $VERSION"
    
    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: production
        tags: pybiorythm:test
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.get-version.outputs.version }}

    - name: Test Docker image
      run: |
        # Test basic functionality
        docker run --rm pybiorythm:test python -c "
        import biorythm
        from datetime import datetime
        calc = biorythm.BiorhythmCalculator()
        result = calc.calculate_biorhythm_values(datetime(1990, 5, 15), datetime(2023, 6, 1))
        print('Docker test passed!')
        print(f'Result: {result}')
        "
        
        # Test CLI interface - capture JSON output only
        docker run --rm pybiorythm:test python main.py -y 1990 -m 5 -d 15 --orientation json-vertical 2>/dev/null | tail -n +9 > output.json
        
        # Validate JSON output
        uv run python -c "
        import json
        try:
            with open('output.json', 'r') as f:
                content = f.read().strip()
                if content and content.startswith('{'):
                    data = json.loads(content)
                    print('JSON validation passed!')
                    print(f'JSON keys: {list(data.keys())}')
                else:
                    print('No valid JSON found in output')
                    exit(1)
        except Exception as e:
            print(f'JSON validation failed: {e}')
            with open('output.json', 'r') as f:
                print('File content:', repr(f.read()[:200]))
            exit(1)
        "

    - name: Test Docker image security
      run: |
        # Check that container runs as non-root
        USER_ID=$(docker run --rm pybiorythm:test id -u)
        if [ "$USER_ID" = "0" ]; then
          echo "ERROR: Container running as root user"
          exit 1
        else
          echo "SUCCESS: Container running as non-root user (UID: $USER_ID)"
        fi

    - name: Analyze image size and layers
      run: |
        docker images pybiorythm:test
        docker history pybiorythm:test --no-trunc

  # Job 4: Package Build and Validation
  build:
    name: Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 6
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV and build tools
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install build dependencies
      timeout-minutes: 3
      run: |
        uv sync --group dev

    - name: Build package
      run: uv run python -m build

    - name: Check package
      run: uv run twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  # Job 5: Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [test, docker]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install dependencies
      timeout-minutes: 3
      run: |
        uv sync --group dev

    - name: Run integration tests
      run: |
        # Test CLI with various inputs
        uv run python main.py -y 1990 -m 5 -d 15
        uv run python main.py -y 1985 -m 12 -d 25 --orientation horizontal --days 30
        
        # Test CLI JSON output - capture JSON only, filter out warnings
        uv run python main.py -y 2000 -m 1 -d 1 --orientation json-vertical 2>/dev/null | tail -n +9 > test_output.json
        
        # Validate JSON structure
        uv run python -c "
        import json
        try:
            with open('test_output.json', 'r') as f:
                content = f.read().strip()
                if content and content.startswith('{'):
                    data = json.loads(content)
                    assert 'meta' in data
                    assert 'data' in data
                    assert 'cycle_repeats' in data
                    print('Integration tests passed!')
                    print(f'JSON keys: {list(data.keys())}')
                else:
                    print('No valid JSON found in output')
                    exit(1)
        except Exception as e:
            print(f'JSON validation failed: {e}')
            with open('test_output.json', 'r') as f:
                print('File content:', repr(f.read()[:200]))
            exit(1)
        "

  # Job 6: Performance Benchmark
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 6
    needs: test
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install dependencies
      timeout-minutes: 3
      run: |
        uv sync --group dev

    - name: Run performance benchmarks
      run: |
        uv run python -c "
        import time
        from datetime import datetime
        import biorythm
        
        # Benchmark calculation speed
        calc = biorythm.BiorhythmCalculator()
        birthdate = datetime(1990, 5, 15)
        target_date = datetime(2023, 6, 1)
        
        start_time = time.time()
        for _ in range(1000):
            calc.calculate_biorhythm_values(birthdate, target_date)
        end_time = time.time()
        
        avg_time = (end_time - start_time) / 1000
        print(f'Average calculation time: {avg_time:.6f} seconds')
        
        # Performance threshold
        if avg_time > 0.001:
            print('WARNING: Performance regression detected')
        else:
            print('Performance benchmark passed')
        "

  # Job 7: Quick Validation (SBOM handled by dedicated workflow)
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: test
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate project structure
      run: |
        # Quick project health checks
        [ -f pyproject.toml ] || exit 1
        [ -f Dockerfile ] || exit 1
        [ -d biorythm ] || exit 1
        [ -d tests ] || exit 1
        echo "âœ… Project structure validation passed"
