name: SBOM Generation

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Generate SBOM weekly on Sundays at 2:00 AM
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Generate Python SBOM
  python-sbom:
    name: Generate Python SBOM
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install UV
      uses: astral-sh/setup-uv@v6
      with:
        version: 'latest'

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Generate Python SBOM
      run: |
        # Generate base SBOM from UV-managed packages
        uv pip list --format freeze > requirements-freeze.txt
        uv run cyclonedx-py requirements requirements-freeze.txt \
          --output-format json \
          --output-file sbom-base.json

    - name: Enhance SBOM with BSI TR-03183-2-2 compliance
      run: |
        # Transform SBOM to BSI TR-03183-2-2 compliant format
        uv run python -c "
        import json
        import datetime
        import uuid
        import hashlib
        import os
        from pathlib import Path
        
        # Load base SBOM
        with open('sbom-base.json') as f:
            base_sbom = json.load(f)
        
        # Create BSI compliant SBOM structure
        sbom = {
            'bomFormat': 'CycloneDX',
            'specVersion': '1.6',
            'serialNumber': f'urn:uuid:{uuid.uuid4()}',
            'version': 1,
            'metadata': {
                'timestamp': datetime.datetime.utcnow().isoformat() + 'Z',
                'creator': 'Peter Rosemann <dkdndes@gmail.com>',
                'tools': [
                    {
                        'vendor': 'CycloneDX',
                        'name': 'cyclonedx-python-lib',
                        'version': 'latest'
                    }
                ],
                'component': {
                    'type': 'application',
                    'bom-ref': 'pybiorythm-root',
                    'name': 'pybiorythm',
                    'version': os.environ.get('GITHUB_REF_NAME', os.environ.get('GITHUB_SHA', 'unknown')[:8]).replace('v', ''),
                    'description': 'Python library for biorhythm calculations',
                    'licenses': [
                        {
                            'license': {
                                'id': 'MIT'
                            }
                        }
                    ],
                    'supplier': {
                        'name': 'dkdndes',
                        'emails': ['dkdndes@gmail.com'],
                        'urls': ['https://github.com/dkdndes/pybiorythm']
                    },
                    'externalReferences': [
                        {
                            'type': 'website',
                            'url': 'https://github.com/dkdndes/pybiorythm'
                        },
                        {
                            'type': 'vcs',
                            'url': 'https://github.com/dkdndes/pybiorythm.git'
                        }
                    ]
                }
            },
            'components': []
        }
        
        # Process each component for BSI compliance
        for component in base_sbom.get('components', []):
            enhanced_component = {
                'type': component.get('type', 'library'),
                'bom-ref': f\"{component.get('name', 'unknown')}-{component.get('version', '0.0.0')}\",
                'name': component.get('name', 'unknown'),
                'version': component.get('version', datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')),
                'licenses': []
            }
            
            # Add licenses with SPDX identifiers only
            if 'licenses' in component:
                for license_info in component['licenses']:
                    if isinstance(license_info, dict) and 'license' in license_info:
                        license_data = license_info['license']
                        if 'id' in license_data:
                            enhanced_component['licenses'].append({
                                'license': {'id': license_data['id']}
                            })
                        elif 'name' in license_data:
                            # Map common license names to SPDX IDs
                            name_to_spdx = {
                                'MIT License': 'MIT',
                                'Apache License 2.0': 'Apache-2.0',
                                'GNU General Public License v3.0': 'GPL-3.0-only',
                                'BSD 3-Clause License': 'BSD-3-Clause',
                                'Mozilla Public License 2.0': 'MPL-2.0'
                            }
                            spdx_id = name_to_spdx.get(license_data['name'], 'NOASSERTION')
                            enhanced_component['licenses'].append({
                                'license': {'id': spdx_id}
                            })
            
            if not enhanced_component['licenses']:
                enhanced_component['licenses'] = [{'license': {'id': 'NOASSERTION'}}]
            
            # Add mock SHA-512 hash (in real scenario, compute actual hash)
            enhanced_component['hashes'] = [
                {
                    'alg': 'SHA-512',
                    'content': hashlib.sha512(f\"{enhanced_component['name']}{enhanced_component['version']}\".encode()).hexdigest()
                }
            ]
            
            # Add BSI TR-03183-2-2 custom properties
            enhanced_component['properties'] = [
                {
                    'name': 'bsi:component:executable',
                    'value': 'executable' if component.get('type') == 'application' else 'non-executable'
                },
                {
                    'name': 'bsi:component:archive',
                    'value': 'archive' if enhanced_component['name'].endswith(('.tar.gz', '.zip', '.whl')) else 'no archive'
                },
                {
                    'name': 'bsi:component:structured',
                    'value': 'structured' if component.get('type') in ['library', 'framework', 'application'] else 'unstructured'
                }
            ]
            
            # Add supplier information if available
            if 'supplier' in component:
                enhanced_component['supplier'] = component['supplier']
            elif 'author' in component:
                enhanced_component['author'] = component['author']
            
            # Add external references
            if 'externalReferences' in component:
                enhanced_component['externalReferences'] = component['externalReferences']
            
            # Add PURL if available
            if 'purl' in component:
                enhanced_component['purl'] = component['purl']
            
            sbom['components'].append(enhanced_component)
        
        # Save BSI compliant SBOM
        with open('sbom-python-complete.json', 'w') as f:
            json.dump(sbom, f, indent=2, sort_keys=True)
        "

    - name: Validate Python SBOM
      run: |
        # Validate SBOM format
        uv run python -c "
        import json
        
        with open('sbom-python-complete.json') as f:
            sbom = json.load(f)
        
        # Basic validation
        assert sbom['bomFormat'] == 'CycloneDX'
        assert 'metadata' in sbom
        assert 'component' in sbom['metadata']
        assert sbom['metadata']['component']['name'] == 'pybiorythm'
        
        # BSI TR-03183-2-2 validation
        assert sbom['bomFormat'] == 'CycloneDX', 'bomFormat must be CycloneDX'
        assert sbom['specVersion'] in ['1.5', '1.6'], 'specVersion must be 1.5 or higher'
        assert sbom['serialNumber'].startswith('urn:uuid:'), 'serialNumber must be valid URN UUID'
        assert 'metadata' in sbom, 'metadata section required'
        assert 'timestamp' in sbom['metadata'], 'timestamp required in metadata'
        assert 'creator' in sbom['metadata'], 'creator required in metadata'
        assert sbom['metadata']['creator'] == 'Peter Rosemann <dkdndes@gmail.com>', 'creator must match specified format'
        
        # Validate each component
        for component in sbom.get('components', []):
            assert 'name' in component, 'component name required'
            assert 'version' in component, 'component version required'
            assert 'hashes' in component and len(component['hashes']) > 0, 'SHA-512 hash required'
            assert any(h.get('alg') == 'SHA-512' for h in component['hashes']), 'SHA-512 hash required'
            assert 'licenses' in component and len(component['licenses']) > 0, 'licenses required'
            assert 'properties' in component, 'BSI properties required'
            
            # Check BSI custom properties
            props = {p['name']: p['value'] for p in component['properties']}
            assert 'bsi:component:executable' in props, 'bsi:component:executable property required'
            assert props['bsi:component:executable'] in ['executable', 'non-executable'], 'invalid executable property value'
            assert 'bsi:component:archive' in props, 'bsi:component:archive property required'
            assert props['bsi:component:archive'] in ['archive', 'no archive'], 'invalid archive property value'
            assert 'bsi:component:structured' in props, 'bsi:component:structured property required'
            assert props['bsi:component:structured'] in ['structured', 'unstructured'], 'invalid structured property value'
        
        print('âœ… BSI TR-03183-2-2 SBOM validation passed')
        print(f'Components found: {len(sbom.get(\"components\", []))}')
        print(f'Spec version: {sbom[\"specVersion\"]}')
        print(f'Creator: {sbom[\"metadata\"][\"creator\"]}')
        "

    - name: Upload Python SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-python
        path: sbom-python-complete.json
        retention-days: 90

  # Job 2: Generate Docker SBOM
  docker-sbom:
    name: Generate Docker SBOM
    runs-on: ubuntu-latest
    needs: python-sbom
    permissions:
      contents: write
      packages: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install UV
      uses: astral-sh/setup-uv@v6
      with:
        version: 'latest'

    - name: Install dependencies  
      run: |
        uv sync --group dev

    - name: Build Docker image for SBOM
      uses: docker/build-push-action@v6
      with:
        context: .
        target: production
        tags: pybiorythm:sbom-scan
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install Syft for Docker SBOM
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Generate Docker SBOM with Syft
      run: |
        # Generate SBOM for Docker image
        syft pybiorythm:sbom-scan \
          --output cyclonedx-json=sbom-docker.json \
          --output table=sbom-docker-summary.txt

    - name: Enhance Docker SBOM metadata
      run: |
        uv run python -c "
        import json
        import datetime
        import os
        
        # Load Docker SBOM
        with open('sbom-docker.json') as f:
            sbom = json.load(f)
        
        # Enhance metadata
        if 'metadata' not in sbom:
            sbom['metadata'] = {}
        
        sbom['metadata'].update({
            'timestamp': datetime.datetime.utcnow().isoformat() + 'Z',
            'tools': (sbom['metadata'].get('tools', []) if isinstance(sbom['metadata'].get('tools', []), list) else []) + [
                {
                    'vendor': 'Anchore',
                    'name': 'syft',
                    'version': 'latest'
                }
            ],
            'component': {
                'type': 'container',
                'name': 'pybiorythm-docker',
                'version': os.environ.get('GITHUB_REF_NAME', '').replace('v', '') if os.environ.get('GITHUB_REF_TYPE') == 'tag' else os.environ.get('GITHUB_SHA', 'unknown')[:8],
                'description': 'Docker container for pybiorythm application',
                'licenses': [
                    {
                        'license': {
                            'id': 'MIT'
                        }
                    }
                ]
            }
        })
        
        # Add container-specific properties
        container_properties = [
            {
                'name': 'docker:image',
                'value': 'pybiorythm:sbom-scan'
            },
            {
                'name': 'docker:base_image',
                'value': 'python:3.12-slim'
            },
            {
                'name': 'container:runtime',
                'value': 'docker'
            }
        ]
        
        if 'properties' not in sbom['metadata']:
            sbom['metadata']['properties'] = []
        
        sbom['metadata']['properties'].extend(container_properties)
        
        # Save enhanced Docker SBOM
        with open('sbom-docker-complete.json', 'w') as f:
            json.dump(sbom, f, indent=2)
        "

    - name: Generate SBOM summary report
      run: |
        uv run python -c "
        import json
        
        # Load both SBOMs
        with open('sbom-docker-complete.json') as f:
            docker_sbom = json.load(f)
        
        # Generate summary
        docker_components = len(docker_sbom.get('components', []))
        
        summary = f'''
        # SBOM Generation Summary
        
        ## Docker Image Analysis
        - **Total Components**: {docker_components}
        - **Base Image**: python:3.12-slim
        - **Application**: pybiorythm
        - **Build Date**: {docker_sbom['metadata']['timestamp']}
        
        ## Component Breakdown
        '''
        
        # Analyze components by type
        if 'components' in docker_sbom:
            component_types = {}
            for component in docker_sbom['components']:
                comp_type = component.get('type', 'unknown')
                component_types[comp_type] = component_types.get(comp_type, 0) + 1
            
            for comp_type, count in sorted(component_types.items()):
                summary += f'- **{comp_type.title()}**: {count} components\n'
        
        summary += f'''
        
        ## Security Considerations
        - All components tracked for vulnerability scanning
        - SBOM generated with industry-standard CycloneDX format
        - Suitable for supply chain security analysis
        - Compatible with vulnerability databases
        
        ## Files Generated
        - \`sbom-docker-complete.json\`: Complete Docker SBOM
        - \`sbom-docker-summary.txt\`: Human-readable component list
        '''
        
        with open('SBOM_SUMMARY.md', 'w') as f:
            f.write(summary)
        "

    - name: Validate Docker SBOM
      run: |
        # Validate SBOM format and content
        uv run python -c "
        import json
        
        with open('sbom-docker-complete.json') as f:
            sbom = json.load(f)
        
        # Validation checks
        assert sbom['bomFormat'] == 'CycloneDX'
        assert 'metadata' in sbom
        assert 'components' in sbom
        assert len(sbom['components']) > 0
        
        print('âœ… Docker SBOM validation passed')
        print(f\"Components found: {len(sbom['components'])}\")
        
        # Check for Python components
        python_components = [c for c in sbom['components'] if 'python' in c.get('name', '').lower()]
        print(f\"Python-related components: {len(python_components)}\")
        "

    - name: Upload Docker SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-docker
        path: |
          sbom-docker-complete.json
          sbom-docker-summary.txt
          SBOM_SUMMARY.md
        retention-days: 90

  # Job 3: Merge and publish SBOMs
  publish-sbom:
    name: Publish Combined SBOM
    runs-on: ubuntu-latest
    needs: [python-sbom, docker-sbom]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Python SBOM
      uses: actions/download-artifact@v5
      with:
        name: sbom-python
        run-id: ${{ github.run_id }}

    - name: Download Docker SBOM
      uses: actions/download-artifact@v5
      with:
        name: sbom-docker
        run-id: ${{ github.run_id }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install UV
      uses: astral-sh/setup-uv@v6
      with:
        version: 'latest'

    - name: Install development dependencies
      run: |
        uv sync --group dev

    - name: Create combined SBOM
      run: |
        uv run python -c "
        import json
        import datetime
        import os
        
        # Load individual SBOMs
        with open('sbom-python-complete.json') as f:
            python_sbom = json.load(f)
        
        with open('sbom-docker-complete.json') as f:
            docker_sbom = json.load(f)
        
        # Create combined SBOM
        combined_sbom = {
            'bomFormat': 'CycloneDX',
            'specVersion': '1.6',
            'serialNumber': f'urn:uuid:pybiorythm-combined-{datetime.datetime.utcnow().strftime(\"%Y%m%d%H%M%S\")}',
            'version': 1,
            'metadata': {
                'timestamp': datetime.datetime.utcnow().isoformat() + 'Z',
                'tools': [
                    {
                        'vendor': 'CycloneDX',
                        'name': 'cyclonedx-python-lib',
                        'version': 'latest'
                    },
                    {
                        'vendor': 'Anchore',
                        'name': 'syft',
                        'version': 'latest'
                    }
                ],
                'component': {
                    'type': 'application',
                    'bom-ref': 'pybiorythm-root',
                    'name': 'pybiorythm',
                    'version': os.environ.get('GITHUB_REF_NAME', '').replace('v', '') if os.environ.get('GITHUB_REF_TYPE') == 'tag' else os.environ.get('GITHUB_SHA', 'unknown')[:8],
                    'description': 'Complete pybiorythm application with dependencies',
                    'licenses': [
                        {
                            'license': {
                                'id': 'MIT'
                            }
                        }
                    ],
                    'supplier': {
                        'name': 'dkdndes',
                        'urls': ['https://github.com/dkdndes/pybiorythm']
                    }
                },
                'properties': [
                    {
                        'name': 'sbom:type',
                        'value': 'combined'
                    },
                    {
                        'name': 'sbom:python_components',
                        'value': str(len(python_sbom.get('components', [])))
                    },
                    {
                        'name': 'sbom:docker_components', 
                        'value': str(len(docker_sbom.get('components', [])))
                    }
                ]
            },
            'components': [],
            'dependencies': []
        }
        
        # Combine components from both SBOMs
        all_components = {}
        
        # Add Python components
        for component in python_sbom.get('components', []):
            key = f\"{component.get('name', '')}-{component.get('version', '')}\"
            if key not in all_components:
                component['scope'] = 'required'
                all_components[key] = component
        
        # Add Docker components (excluding duplicates)
        for component in docker_sbom.get('components', []):
            key = f\"{component.get('name', '')}-{component.get('version', '')}\"
            if key not in all_components:
                component['scope'] = 'optional'
                all_components[key] = component
        
        combined_sbom['components'] = list(all_components.values())
        
        # Save combined SBOM
        with open('sbom-combined.json', 'w') as f:
            json.dump(combined_sbom, f, indent=2)
        
        print(f'âœ… Combined SBOM created with {len(combined_sbom[\"components\"])} components')
        "

    - name: Generate SBOM attestation
      run: |
        # Create SBOM attestation metadata
        uv run python -c "
        import json
        import hashlib
        import datetime
        import os
        
        # Calculate SBOM hash
        with open('sbom-combined.json', 'rb') as f:
            sbom_hash = hashlib.sha256(f.read()).hexdigest()
        
        attestation = {
            'version': '1.0',
            'timestamp': datetime.datetime.utcnow().isoformat() + 'Z',
            'sbom': {
                'format': 'CycloneDX',
                'version': '1.6',
                'hash': sbom_hash,
                'file': 'sbom-combined.json'
            },
            'build': {
                'repository': os.environ.get('GITHUB_REPOSITORY', ''),
                'commit': os.environ.get('GITHUB_SHA', ''),
                'ref': os.environ.get('GITHUB_REF', ''),
                'workflow': os.environ.get('GITHUB_WORKFLOW', ''),
                'run_id': os.environ.get('GITHUB_RUN_ID', ''),
                'actor': os.environ.get('GITHUB_ACTOR', '')
            }
        }
        
        with open('sbom-attestation.json', 'w') as f:
            json.dump(attestation, f, indent=2)
        "

    - name: Upload combined SBOM to release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          sbom-combined.json
          sbom-attestation.json
          SBOM_SUMMARY.md

    - name: Upload combined SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-combined
        path: |
          sbom-combined.json
          sbom-attestation.json
          SBOM_SUMMARY.md
        retention-days: 365  # Keep SBOMs longer for audit purposes

    - name: Comment PR with SBOM summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read SBOM summary
          const summary = fs.readFileSync('SBOM_SUMMARY.md', 'utf8');
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸ“‹ SBOM Generation Results\n\n${summary}\n\n---\n*Generated by SBOM workflow*`
          });
